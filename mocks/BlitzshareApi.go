// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	blitzshare "bootstrap.cli/app/services/blitzshare"
	mock "github.com/stretchr/testify/mock"
)

// BlitzshareApi is an autogenerated mock type for the BlitzshareApi type
type BlitzshareApi struct {
	mock.Mock
}

// DeregisterAsPeer provides a mock function with given fields: otp, token
func (_m *BlitzshareApi) DeregisterAsPeer(otp *string, token *string) bool {
	ret := _m.Called(otp, token)

	var r0 bool
	if rf, ok := ret.Get(0).(func(*string, *string) bool); ok {
		r0 = rf(otp, token)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// GetBootstrapNode provides a mock function with given fields:
func (_m *BlitzshareApi) GetBootstrapNode() *blitzshare.NodeConfigRespone {
	ret := _m.Called()

	var r0 *blitzshare.NodeConfigRespone
	if rf, ok := ret.Get(0).(func() *blitzshare.NodeConfigRespone); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*blitzshare.NodeConfigRespone)
		}
	}

	return r0
}

// GetPeerConfig provides a mock function with given fields: oneTimePass
func (_m *BlitzshareApi) GetPeerConfig(oneTimePass *string) *blitzshare.P2pPeerRegistryResponse {
	ret := _m.Called(oneTimePass)

	var r0 *blitzshare.P2pPeerRegistryResponse
	if rf, ok := ret.Get(0).(func(*string) *blitzshare.P2pPeerRegistryResponse); ok {
		r0 = rf(oneTimePass)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*blitzshare.P2pPeerRegistryResponse)
		}
	}

	return r0
}

// RegisterAsPeer provides a mock function with given fields: multiAddr, oneTimePass, mode
func (_m *BlitzshareApi) RegisterAsPeer(multiAddr *string, oneTimePass *string, mode *string) *string {
	ret := _m.Called(multiAddr, oneTimePass, mode)

	var r0 *string
	if rf, ok := ret.Get(0).(func(*string, *string, *string) *string); ok {
		r0 = rf(multiAddr, oneTimePass, mode)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	return r0
}
